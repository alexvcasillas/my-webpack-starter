{
  "name": "My Webpack Starter",
  "tagline": "This is the entry point for Webpack Starter Kit. If you need a starting point for Webpack ready to use, you may use this project.",
  "body": "# My Webpack Starter\r\n\r\n**My Webpack Starter** is a ready to use entry point to start developing *Javascript* Apps with *Webpack*.\r\n\r\n### What does My Webpack Starter is useful for?\r\n\r\n**My Webpack Starter** is useful to watch and compile changes while you develop your App or just to build and bundle your *Javascript* files.\r\n\r\n### How do I get started with My Webpack Starter?\r\n\r\nFirst of all, it would be necessary to have (cpt. obvious' wisdom) `webpack` installed onto your computer if you still don't have it. You can make this happen running the following command in your console: `npm install webpack -g`. This will make *webpack* command to be available globaly (everywhere).\r\n\r\nTo get started using **My Webpack Starter** you only need to clone this repository and run `npm install` to fetch all the *dependencies* which are the following:\r\n\r\n* babel-core: ^6.17.0\r\n* babel-loader: ^6.2.5\r\n* babel-plugin-transform-es2015-modules-commonjs: ^6.16.0\r\n* babel-preset-es2015: ^6.16.0\r\n* jshint: \"^2.9.3\r\n* jshint-loader: \"^0.8.3\r\n* webpack: \"^1.13.2\r\n* node-libs-browser: \"^1.0.0\r\n* strip-loader: ^0.1.2\r\n\r\nAfter you have downloaded all *dependencies* you only need to run two single commands to get started:\r\n\r\n`npm run development`: This command will run *Webpack* in development mode, watching file changes while you work and linting all possible errors in your code.\r\n\r\n`npm run production`: This command will run *Webpack* in production mode, which means it will grab your *App's Entry Point* and start transpiling it into valid `ECMAScript5` and including all your `imports` into one single bundled file.\r\n\r\n### How do I change my App's Entry Point?\r\n\r\nBy default, **My Webpack Starter** has the *App's Entry Point* at `app/app.js`. To change this entry point, you will have to open `webpack.config.js` and update the following line:\r\n\r\n`entry: \"./public/javascript/app.js\", // Entry Point of the App`\r\n\r\nReplace the path with your desired entry point of the App. Take note that this should be a relative position from the `webpack.config.js`.\r\n\r\n### What if I don't want My Webpack Starter lint my files before compiling?\r\n\r\nTo achieve this (I'm not sure why wouldn't you want a not-linted code to prevent bugs or issues with new features) you will have to open `webpack.config.js` and just comment or remove (better to comment, just in case for future needs) the following code:\r\n\r\n```\r\npreLoaders: [\r\n  {\r\n      test: /\\.js$/,\r\n      exclude: /node_modules/,\r\n      loader: 'jshint-loader'\r\n\r\n  }\r\n],\r\n```\r\n\r\n### What if I want to add more \"cutting edge\" features to my Javascript and be able to compile them?\r\n\r\nWell, if you want this you will need to install new dependencies with `npm install --save-dev <awesome-babel-preset-package>` and then, go to `webpack.config.js` and edit the following line:\r\n\r\n`presets: ['es2015'] // Presets for the Babel-Loader`.\r\n\r\nThis line is an `Array` of all the presets you want *Webpack* to compile with to make the transpiling magic on your code, so, for example, if we wanted `es2016` and `es2017` presets for our code, the line will look like:\r\n\r\n`presets: ['es2015', 'es2016', 'es2017'] // Presets for the Babel-Loader`.\r\n\r\nBut that won't be all, you also need to go to the `.babelrc` file in the root of the project and modify it. The first time you open this file the code should look like (if is not, you have a problem):\r\n\r\n`{ \"presets\": [ \"es2015\" ] }`\r\n\r\nWe need to do the same process as we did for our `webpack.config.js` and your `.babelrc` file should ended looking like this:\r\n\r\n`{ \"presets\": [ \"es2015\", \"es2016\", \"es2017\" ] }`\r\n\r\nAnd that would be everything you should now about **Adding Cutting Edge Features** to your Javascript.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}